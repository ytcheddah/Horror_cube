

Git/Github Notes:

    2 Seperate things:
        Github - website, extension of Git, more of a front end
        Git - handles all of version control eg:
            Pushing pulling, combining code, back end and more powerful
            Git is not a dependency of Github

    Local vs Remote Repository:

        Local sits only on your machine, changes are usually done here then sent to a Remote
            Repository

        Remote Repository is what can be looked at from any machine, should be the mostly
            up to date, can be used to change and make changes to your local Repository
    
    Stage, commit, push, pull in terminal
        
        branch commands in terminal
            git branch 
                # checks the branch you are currently on
            git checkout <branch-name> 
                # replace '<branch-name>' with the name of the branch you want to switch to
                    If the branch doesnt exist locally but does exist remotely, use:
                        git checkout -b <branch-name>
            
        stage       
            git add .
        commit -- for main
            git commit -m "your commit message"
        push -- for main
            git push origin main
        pull -- pull before starting work !!! (For YT especially)
            git pull origin main


    Git History and Branches:

        Tracks commits, commits are changes being done locally and later pushed to the remote repository
            used as a checkpoint to be able to go back to if anything goes wrong. automatically logs
            time, who made the change, and notes that are able to be made about the commits
        Pushing commit(s) can be done for 1 or multiple commits, also logs who and when the push was done.
        Pulls can update your local code with any other pushes that have been made from other people's work.

        Branches track all the history of the commits, pushes, and pulls.
            Master Branch - the base inicial branch, make sure this branch is always working, shouldnt be the
                main branched to be worked on, rather, it should only be there as a final product/working
                product ready to be tested.
            other branches can be named and stem off Master branch to make a seperate timeline, it takes 
                everything that currently was on the branch it branches off of, but now you can make unique
                changes or work to not affect the master branch and therefor avert the risk of braking the
                overall master branch code.
        
    Terminal and Commands

        If you copy text, right clicking in a terminal should paste the copied text into it.
        Local repositories can be made in your terminal using Git (if its been installed on your machine)
        cd = change directory - very important for navigating withing directories in your terminal
        mkdir = make directory - can be used to make a new directory/folder
        git init = common way to start a new repository for a new folder/directory you are in, this converts
            the folder you are in to be tracked and able to used commands by and for all Git and its features.

        Staging area - add files for your next commit: this is done with; git add (name of file)
                     - *also use; git add . (this adds all changes made to the staging area)
                     - this can be checked with; git status
                     - once staging is ready, you can make a commit, done usually at obvious milestone/checkpoint
                        this is done using; git commit -m (notes about what the commit is/does).
                        this will clean the staging area and it has now updated the branch you are on.
                     - you can also remove files youve added to the staging area, whether it was a mistake
                        or what not, this is done with; git remove (name of file)
        
        branch creation/merging - to create a new branch in a terminal, use; git checkout -b (name of new branch)
                     - change to a different branch using; git checkout (name of branch)
                     - to bring a change on a different branch to the master branch, use; git merge master(or name
                                of branch you want to merge into)
    
    Remote Repository

        Once you create an account and name your repository and everything, it is ready to be set up to then initialize
        the creation to be an enabled and working remote repository, this is done with commands and for the most part,
        there are a series of commits that can be made to make the repository work, this is done using:
            git remote add origin (the link to your repository[will be given to you on GitHub]) then;
            git push -u origin master
        ...or push an existing repository from the command line by using:
            git remote add origin (the link to your repository[will be given to you on GitHub]) then;
            git push -u origin master   --- (this is the same steps as a new one)
        
    Remote = Url to another repository

        - git push -u origin master   --- this pushes all commits currently staged to the master branch on a Remote Repository.
        - git config --global user.name "(whatever you want to be named remotely)"
        - git config --global user.email "(email you want to be confifured to Git)"
            *if things dont work at this point, look up on the internet your authentication issues*
        - git pull origin master   --- this pulls changes from remote repo to your local repo.
        
        *pushes wont work if you are not up to date locally with the remote repo, or if there are conflicts to the changes
            made on the same line, you will need to manually tell Git what any merge conflicts should look like*
        - git push origin (name of different branch if ur not working in master branch)


umo_sprite_movement 
    goal: is to implement the animation and movement of the sprite monster 'umo'
    status: work in progress
    Ideas: umo moves in a random direction with the roam_chase animation.
        - these animations are the same, but chase will be played back faster and 
        the umo will move faster as well
        - the key differences will be that during roam, it will move in a random 
        direction then trigger the 'idle' animation before triggering the 'roam' 
        animation again

Object oriented Programming:

    everything is treated as an Object
    parameters apply to more than self
    parameters may apply to any Object

        OOP Notes Tech with Tim:

            everything created already has a default object type based off what class it is
            in, ex: string, integer, float, function, etc.
            any "." operater calls a method that acts on an object, you can use methods based off
            which type of class an object is.
            methods within a class define its potential operations, can be used when calling an instance
            of its class.
            __init__, initialize, is a special method that instanciates the object right when its created, always happens
            when you call a class, in order to call a class, you need to pass any parameters that are required
            or stored in the init function within said class.
            the (self) behind the scenes allows you to store different objects with different names and characteristics
            through the same functions without replacing old attributes given to passed through objects.
            self allows you to know which object is being called amongst preexisting objects that have been created
            and passed through.
            the object itself gets passed as a parameter when self is passed through __init__. initializes all actions
            that are accessible through a class and its methods.
            you can make attributes that are not connected to a parameter within a funciton.

        Inheritance Notes Tech with Tim:
            


Mood meter
    range (1, 1000)
    x 5 to 96 pixels = 91 pixels in length
    1000/91 = 10.989010989010989
        rounds up to 11
    every 11 instances of time, reduce the size of the bar by 1 pixel
    3 colors
        if x > 60               green
        if x <= 60 and x >30    yellow
        if x <= 30              red
    3 status effects follow the same format
        if x > 60               Comfortable, you are unbothered
        if x <= 60 and x > 30   Uneasy, you hallucinate but you are aware that it's in your head. You may feel your lunch come up
        if x <= 30              Schizo, you are in a state of crazed paranoia. Your senses are heightened, and you feel like you can move faster. 
                                However you don't know if that monster chasing you is real or a figment of your imagination. 
                                Better not test that!
                       
    Comfortable (baseline stats)
    Uneasy (slight speed down. vision slightly increased. slightly transparent monsters spawn which don't influence the player, 
    if one passes through you, puke)
    Schizo (slight speed up. vision increased. fully Opaque monsters spawn out of view. They CAN and WILL kill you)
